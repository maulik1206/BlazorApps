@inject ToastService ToastService

<div class="toast" style="position: fixed; top: 10px; right: 10px; display: @(isVisible ? "block" : "none")">
    <div class="toast-header">
        <strong class="toast-title">@title</strong>
    </div>
    <div class="toast-body">
        @message
    </div>
</div>

<div class="toast align-items-center" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
        <div class="toast-body">
            Hello, world! This is a toast message.
        </div>
        <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
</div>

@code {
    private string title;
    private string message;
    private bool isVisible = false;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
    }

    private void ShowToast(string toastTitle, string toastMessage)
    {
        title = toastTitle;
        message = toastMessage;
        isVisible = true;
        StateHasChanged();

        // Hide the toast after 3 seconds
        Task.Delay(3000).ContinueWith(_ =>
        {
            isVisible = false;
            InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        // Unsubscribe to prevent memory leaks
        ToastService.OnShow -= ShowToast;
    }
}
