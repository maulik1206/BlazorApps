@using System.ComponentModel.DataAnnotations

<EditForm Model="client" OnValidSubmit="SaveClient">
    <DataAnnotationsValidator />
    <div class="container">
        <h3>@(client.Id == 0 ? "Add Client" : "Edit Client")</h3>
        <div class="row">
            <div class="col-md-4">
                <label>First Name</label>
                <InputText class="form-control" @bind-Value="client.FirstName" />
                <ValidationMessage For="() => client.FirstName" class="text-danger" />
            </div>
            <div class="col-md-4">
                <label>Last Name</label>
                <InputText class="form-control" @bind-Value="client.LastName" />
                <ValidationMessage For="() => client.LastName" class="text-danger" />
            </div>
            <div class="col-md-4">
                <label>Email</label>
                <InputText class="form-control" @bind-Value="client.Email" />
                <ValidationMessage For="() => client.Email" class="text-danger" />
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-md-4">
                <label>Phone</label>
                <InputText class="form-control" @bind-Value="client.Phone" />
                <ValidationMessage For="() => client.Phone" class="text-danger" />
            </div
              <div class="col-md-4">
                <label>Password</label>
                <InputText  class="form-control" @bind-Value="client.Password" />
                <ValidationMessage For="() => client.Password" class="text-danger" />
            </div>
             <div class="col-md-4">
                <label>Gender</label>
                <InputSelect class="form-control" @bind-Value="client.Gender">
                    <option value="">Select</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </InputSelect>
                <ValidationMessage For="() => client.Gender" class="text-danger" />
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-md-4">
                <label>Street</label>
                <InputText class="form-control" @bind-Value="client.Street" />
                <ValidationMessage For="() => client.Street" class="text-danger" />
            </div>
            <div class="col-md-3">
                <label>City</label>
                <InputText class="form-control" @bind-Value="client.City" />
                <ValidationMessage For="() => client.City" class="text-danger" />
            </div>
            <div class="col-md-3">
                <label>State</label>
                <InputText class="form-control" @bind-Value="client.State" />
                <ValidationMessage For="() => client.State" class="text-danger" />
            </div>
            <div class="col-md-2">
                <label>Postal Code</label>
                <InputText class="form-control" @bind-Value="client.PostalCode" />
                <ValidationMessage For="() => client.PostalCode" class="text-danger" />
            </div>
        </div>
        <div class="mt-3" style="float:right">
            <button type="submit" class="btn btn-success">Save</button>
            <button type="reset" class="btn btn-primary" @onclick="Reset">Cancel</button>
        </div>
    </div>
</EditForm>

@inject HttpClient Http
@code {
    [Parameter]
    public EventCallback OnClientSaved {get; set;}

    [Parameter]
    public Client client { get; set; } = new Client();

    private async Task SaveClient()
    {
        try
        {
            LoadingService.StartLoading();
            var clientService = new ClientService(Http);
            if (client.Id == 0)
            {
                await clientService.CreateClientAsync(client);
                ToastService.ShowToast("Client", "Client added successfully.");
            }
            else
            {
                await clientService.UpdateClientAsync(client.Id, client);
                ToastService.ShowToast("Client", "Client updated successfully.");
            }
            await OnClientSaved.InvokeAsync();
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Client", ex.Message);
        }
        finally
        {
            LoadingService.StopLoading();
        }        
    }

    private void Reset()
    {
        client = new Client();
    }
}
